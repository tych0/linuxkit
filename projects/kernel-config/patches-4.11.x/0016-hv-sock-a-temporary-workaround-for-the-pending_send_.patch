From 042b1631de7a37dc79ca73ac9cee340fb0d72475 Mon Sep 17 00:00:00 2001
From: Dexuan Cui <decui@microsoft.com>
Date: Wed, 21 Jun 2017 22:30:42 +0800
Subject: [PATCH 16/20] hv-sock: a temporary workaround for the
 pending_send_size issue

While I'm trying to find out the root cause, I believe this can work
as a good temporary workround for internal uses...

Signed-off-by: Dexuan Cui <decui@microsoft.com>
Origin: git@github.com:dcui/linux.git
(cherry picked from commit 531389d1dc73e2be3ee5dbf2091b6f5e74d9764c)
---
 net/vmw_vsock/af_vsock.c         |  7 +++++--
 net/vmw_vsock/hyperv_transport.c | 30 ++++++++++++++++++++++++------
 2 files changed, 29 insertions(+), 8 deletions(-)

diff --git a/net/vmw_vsock/af_vsock.c b/net/vmw_vsock/af_vsock.c
index 717db396f59e..7a3fd62ae7c4 100644
--- a/net/vmw_vsock/af_vsock.c
+++ b/net/vmw_vsock/af_vsock.c
@@ -1544,7 +1544,7 @@ static int vsock_stream_sendmsg(struct socket *sock, struct msghdr *msg,
 	struct sock *sk;
 	struct vsock_sock *vsk;
 	ssize_t total_written;
-	long timeout;
+	long timeout, timeout_once;
 	int err;
 	struct vsock_transport_send_notify_data send_data;
 
@@ -1615,7 +1615,7 @@ static int vsock_stream_sendmsg(struct socket *sock, struct msghdr *msg,
 			}
 
 			release_sock(sk);
-			timeout = schedule_timeout(timeout);
+			timeout_once = schedule_timeout(1);
 			lock_sock(sk);
 			if (signal_pending(current)) {
 				err = sock_intr_errno(timeout);
@@ -1625,6 +1625,9 @@ static int vsock_stream_sendmsg(struct socket *sock, struct msghdr *msg,
 				err = -EAGAIN;
 				finish_wait(sk_sleep(sk), &wait);
 				goto out_err;
+			} else {
+				if (timeout_once == 0)
+					timeout--;
 			}
 
 			prepare_to_wait(sk_sleep(sk), &wait,
diff --git a/net/vmw_vsock/hyperv_transport.c b/net/vmw_vsock/hyperv_transport.c
index 30154836acd0..b8bf1446ae13 100644
--- a/net/vmw_vsock/hyperv_transport.c
+++ b/net/vmw_vsock/hyperv_transport.c
@@ -268,7 +268,7 @@ static void hvs_channel_cb(void *ctx)
 		sk->sk_data_ready(sk);
 
 	/* Mark it writable only if there is enough space */
-	if (hvs_channel_writable_bytes(chan) >= HVS_SEND_BUF_SIZE)
+	if (hv_get_bytes_to_write(&chan->outbound) > 0)
 		sk->sk_write_space(sk);
 }
 
@@ -350,9 +350,11 @@ static void hvs_open_connection(struct vmbus_channel *chan)
 	set_per_channel_state(chan, conn_from_host ? new : sk);
 	vmbus_set_chn_rescind_callback(chan, hvs_close_connection);
 
+#if 0
 	/* See hvs_channel_cb() and hvs_notify_poll_out()  */
 	set_channel_pending_send_size(chan,
 				      HVS_PKT_LEN(HVS_SEND_BUF_SIZE) + 1);
+#endif
 
 	if (conn_from_host) {
 		new->sk_state = SS_CONNECTED;
@@ -542,7 +544,7 @@ static ssize_t hvs_stream_enqueue(struct vsock_sock *vsk, struct msghdr *msg,
 	struct hvsock *hvs = vsk->trans;
 	struct vmbus_channel *chan = hvs->chan;
 	struct hvs_send_buf *send_buf;
-	size_t to_write, max_writable, ret;
+	ssize_t to_write, max_writable, ret;
 
 	BUILD_BUG_ON(sizeof(*send_buf) != PAGE_SIZE_4K);
 
@@ -551,8 +553,8 @@ static ssize_t hvs_stream_enqueue(struct vsock_sock *vsk, struct msghdr *msg,
 		return -ENOMEM;
 
 	max_writable = hvs_channel_writable_bytes(chan);
-	to_write = min_t(size_t, len, max_writable);
-	to_write = min_t(size_t, to_write, HVS_SEND_BUF_SIZE);
+	to_write = min_t(ssize_t, len, max_writable);
+	to_write = min_t(ssize_t, to_write, HVS_SEND_BUF_SIZE);
 
 	ret = memcpy_from_msg(send_buf->data, msg, to_write);
 	if (ret < 0)
@@ -595,8 +597,22 @@ static s64 hvs_stream_has_data(struct vsock_sock *vsk)
 static s64 hvs_stream_has_space(struct vsock_sock *vsk)
 {
 	struct hvsock *hvs = vsk->trans;
+	s64 ret;
 
-	return hvs_channel_writable_bytes(hvs->chan);
+	ret = hvs_channel_writable_bytes(hvs->chan);
+	if (ret > 0)  {
+		set_channel_pending_send_size(hvs->chan, 0);
+	} else {
+		/* See hvs_channel_cb() and hvs_notify_poll_out()  */
+		set_channel_pending_send_size(hvs->chan,
+				      HVS_PKT_LEN(HVS_SEND_BUF_SIZE) + 1);
+
+		ret = hvs_channel_writable_bytes(hvs->chan);
+		if (ret > 0)
+			set_channel_pending_send_size(hvs->chan, 0);
+	}
+
+	return ret;
 }
 
 static u64 hvs_stream_rcvhiwat(struct vsock_sock *vsk)
@@ -646,8 +662,10 @@ int hvs_notify_poll_in(struct vsock_sock *vsk, size_t target, bool *readable)
 static
 int hvs_notify_poll_out(struct vsock_sock *vsk, size_t target, bool *writable)
 {
+	struct hvsock *hvs = vsk->trans;
+
 	/* Report writable only if there is enough space */
-	*writable = hvs_stream_has_space(vsk) >= HVS_SEND_BUF_SIZE;
+	*writable = hvs_channel_writable_bytes(hvs->chan) > 0;
 
 	return 0;
 }
-- 
2.13.0

